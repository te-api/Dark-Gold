import random
from datetime import datetime
import requests
from pyrogram import Client
from pyrogram.types import Message
from database import set_db_wait, del_db_botname, get_db_lockreply, set_db_lockreply, del_db_lockreply


########################################################################################################################
########################################################################################################################


# rep one text msg
async def txt1(m, txt, rep):
    if m.text == txt:
        await m.reply_text(random.choice(rep), reply_to_message_id=m.message_id)
        return


# rep one sticker
async def sticker1(m, txt, rep):
    if m.text == txt:
        await m.reply_sticker(rep, reply_to_message_id=m.message_id)
        return


# rep audio one
async def audio1(m, txt, rep):
    if m.text == txt:
        await m.reply_audio(rep, reply_to_message_id=m.message_id)
        return


# rep video one
async def video1(m, txt, rep):
    if m.text == txt:
        await m.reply_video(rep, reply_to_message_id=m.message_id)
        return


# rep document one
async def document1(m, txt, rep):
    if m.text == txt:
        await m.reply_document(rep, reply_to_message_id=m.message_id)
        return


###################################

# rep all text msg
async def txtall(m, lists, rep):
    if m.text:
        for v in lists:
            if v in m.text:
                await m.reply_text(random.choice(rep), reply_to_message_id=m.message_id)
                return


# rep all sticker
async def stickerall(m, lists, rep):
    if m.text:
        for v in lists:
            if v in m.text:
                await m.reply_sticker(rep, reply_to_message_id=m.message_id)
                return


# rep audio all
async def audioall(m, lists, rep):
    if m.text:
        for v in lists:
            if v in m.text:
                await m.reply_audio(rep, reply_to_message_id=m.message_id)
                return


# rep video all
async def videoall(m, lists, rep):
    if m.text:
        for v in lists:
            if v in m.text:
                await m.reply_video(rep, reply_to_message_id=m.message_id)
                return


# rep document all
async def documentall(m, lists, rep):
    if m.text:
        for v in lists:
            if v in m.text:
                await m.reply_document(rep, reply_to_message_id=m.message_id)
                return


########################################################################################################################
########################################################################################################################

async def lock_lockreply_open(m: Message):
    del_db_lockreply(m.chat.id)
    await m.reply_text("โ ุชู ูุชุญ ุงูุฑุฏูุฏ\nโ", reply_to_message_id=m.message_id)


async def lock_lockreply_close(m: Message):
    if get_db_lockreply(m.chat.id) is None:
        set_db_lockreply("yes", m.chat.id)
        await m.reply_text("โ ุชู ููู ุงูุฑุฏูุฏ\nโ", reply_to_message_id=m.message_id)
        return
    else:
        for per in get_db_lockreply(m.chat.id):
            if per[0] == "yes":
                await m.reply_text("โ ุงูุฑุฏูุฏ ูููููู ุจุงููุนู\nโ", reply_to_message_id=m.message_id)
                return
        set_db_lockreply("yes", m.chat.id)
        await m.reply_text("โ ุชู ููู ุงูุฑุฏูุฏ\nโ", reply_to_message_id=m.message_id)
        return


async def lock_lockreply_test(m: Message):
    leader = True
    if get_db_lockreply(m.chat.id) is None:
        leader = True
    else:
        for per in get_db_lockreply(m.chat.id):
            if per[0] == "yes":
                leader = False
            else:
                leader = True
    return leader


########################################################################################################################
########################################################################################################################

async def echo_text(m: Message):
    await m.reply_text(m.text[3:])


async def say_text(m: Message):
    r = requests.get("https://apiabs.ml/Antk.php?abs=" + m.text[5:])
    rj = r.json()
    await m.reply_audio("https://translate" + rj["result"]["google"] + rj["result"]["code"] + "UTF-8" +
                       rj["result"]["utf"] + rj["result"]["translate"] + "&tl=ar-IN")


async def omrk(m: Message):
    set_db_wait("calcomrak", m.from_user.id, m.chat.id)
    await m.reply_text("โ ุงุฑุณู ูู ุชุงุฑูุฎ ูููุงุฏู ุจูุฐุง ุงูุดูู -> 5/9/2000\nโ", reply_to_message_id=m.message_id)


async def addgeneralrep(m: Message):
    set_db_wait("addgreply", m.from_user.id, m.chat.id)
    await m.reply_text("โ ุงุฑุณู ูู ุงููููู ุงูุงู\nโ", reply_to_message_id=m.message_id)


async def delgeneralrep(m: Message):
    set_db_wait("delgreply", m.from_user.id, m.chat.id)
    await m.reply_text("โ ุงุฑุณู ูู ุงููููู ุงูุชู ุชุฑุบุจ ูู ุญุฐููุง\nโ", reply_to_message_id=m.message_id)


async def namebot(m: Message):
    del_db_botname()
    set_db_wait("namebot", m.from_user.id, m.chat.id)
    await m.reply_text("โ ุงุฑุณู ูู ุงูุงุณู ุงูุงู\nโ", reply_to_message_id=m.message_id)


########################################################################################################################
########################################################################################################################

async def allreply_for_bot(c: Client, m: Message):
    await txt1(m, "ุนูุฏู ูุงู ุณูู", ["ูุง ููู ุงูุช ุงูุงูู ๐โค๏ธ", "ุฎููุงุงุดุฑ ูุงูุช ๐", "ุจุชุนุฑู ุชุนุฏ ูุญุฏ ูุงู ๐๐"])
    await txt1(m, "ุญุจู", ["ุญุจููู ุงูุชุฑุฑ โค๏ธ", "ูุณูุนูุด ุชูููู ูุฏู ุชุงูู ๐", "ูุงููุง ุจุงูุฎูุงุฒูู ๐ฅบโค๏ธ", "ุจูุฑูููููู ๐๐"])
    await txt1(m, "ุญุตูุฎูุฑ", ["ุญุตูุฎูุฑ ุงู ููุฌู ูููู ุงูุฎูุฑ ูุงูุช ููุง. ๐๐"])
    await txt1(m, "ุญู", ["ุงู ูุณุชุง ุฌูุช ุน ุงูุฌุฑุญ ๐๐", "ุนูููููููููููุจ ๐", "ูุชูุฑูุฒููุงุด ุจูุง ุงููุงู ๐"])
    await txt1(m, "ุฎุฏู ููู ุงูููู", ["ูููููู ุน ุงููุงุชุณ ููุฒู ๐โค๏ธ"])
    await txt1(m, "ุจุงุจุง", ["๐โค๏ธ ููู ุญุจูุจ ุจุงุจุง ุงูุง ููู ุฑูุญ ุจุงุจุง ุงูุง ูููููููู "])
    await txt1(m, "ูุงูุง", ["ุณุช ุงูุญุจุงูุจ ูุงุญุจูู ูุงุญุจูุจู ๐๐"])
    await txt1(m, "ุดุชููู", ["ููุง ุญุงุฌู ูููุจู ุจูุฑุง ูุชุฒูู ููุฌู ุญูู ูู ุบูุฑ ูุชูู ุงุฏุจู ๐โค๏ธ ูุตูุจู ุฏู "])
    await txt1(m, "ูุจุฑู", ["ุงู ูููุจ ุงูุจุฑู ูู ุญุฏ ูุฒุนูู ุงูุง ูููู ุจุงููุงุฌุจ ๐โค๏ธ"])
    await txt1(m, "ูุณุทุง", ["ูุงุจูุชู ุน ุงูุจุณุทู ๐โค"])
    await txt1(m, "ูุฑุญุงู", ["โค๏ธ ุฑุจูุง ูุชูู ุงูุฑุงุญู "])
    await txt1(m, "ุนูุจ", ["ุณูุจ ุงููุงุฏ ููุนุจ ๐๐"])
    await txt1(m, "ูุญุจ", ["๐ฅบโค๏ธ ุงู ูุงูุจุฏ ุงูุญุจ "])
    await txt1(m, "ุนุงูู ุงู", ["ุงุญุณู ููู ๐๐๐", "ุงูุญูุฏููู ูุงูุช ๐ฅบโค๏ธ", "ุจุฎูุฑ ุทูู ูุงูุช ุจุฎูุฑ ๐ฅบโค๏ธ"])
    await txt1(m, "ุจุนุดูู", ["ูู ูู ูุฏุงู ุงููุงุณ ูุฏู ุนูุจ ๐โค๏ธ", "ุฑุงุนู ุงู ูู ูุงุณ ุณูุงุฌู ๐ฅบโค๏ธ", "ุจุดุนุดู ุจูู ุชูุงุตููู โค๏ธ๐"])
    await txt1(m, "ุงูุช ูุฑู", ["ุงููู ูุฑุญู ุงุจูู ูุงู ุจูุดุฑุจ ุงูุดุฑุจู ุจุฎุฑุทูู ุงูุบุณุงูู๐๐"])
    await txt1(m, "ุฎุฏ", ["ูุง ูุนู ูุง ูุงุดู ุณูุงู ๐๐"])
    await txt1(m, "ุงูุฒุนุงูู", ["ุงูุฒุนุงูู ููู ููุณูููุงู ุถุงูุงุจูุงู ๐๐น"])
    await txt1(m, "ููู ุงูุงุฏูู", ["ุงูุด ุจุชุฑูุฏ ููู๐ค"])
    await txt1(m, "ูุงู", ["ูุงู ูุงู ุฌุงูุฒโค๏ธ๐"])
    await txt1(m, "ููู", ["ููู ุจุงููู ุณุฑู ููุจู ๐ค๐"])
    await txt1(m, "ูุงุดู", ["ูุงุดู ุฑุงูุญ ููู โค๏ธ๐ฅบ", "ุฎุฏ ุงูุจุงุจ ูุฑุงู ๐๐", "ุงููุฑูุจ ุงููู ุชูุฏู ๐๐"])
    await txt1(m, "ุบูุณ", ["ุงูู ุงูุช๐๐ฅบ"])
    await txt1(m, "ุงูุช ููู", [" ุจุชุณุงู ูู๐จ๐"])
    await txt1(m, "ุงุญุจู", ["ุงุญุจููู ุงูุชุฑุฑ โค๏ธ", "ูุณูุนูุด ุชูููู ูุฏู ุชุงูู ๐", "ูุงููุง ุจุงูุฎูุงุฒูู ๐ฅบโค๏ธ", "ุจูุฑูููููู ๐๐"])
    await txt1(m, "ุงูู", ["ูููู ูุงู ุ๐๐"])
    await txt1(m, "ูู ุงู", ["ูุงููุด ุญุงุฌู๐"])
    await txt1(m, "ูุงูููู", ["ุงูุง ุณูุฑุงู๐ฟ๐น"])
    await txt1(m, "ููุงูู ููุงู", ["ุงุณูุช ุงูุช๐ผ๐"])
    await txt1(m, "ููู", ["ูุงูุง ูุงุถ ูู ููุง๐๐"])
    await txt1(m, "ุงูุช ููู", ["ุจุงุฑุถ ุงููู ุงููุงุณุนู ๐ฝ๐"])
    await txt1(m, "๐๐๐", ["ุชุฏูู ูุบุงูู ๐๐"])
    await txt1(m, "ูู", ["ุถุญูู ูุด ุณุงููู ๐ณ๐"])
    await txt1(m, "ุงูุจูุช ุนุทูุงู", ["ุจุทูู ูุฏุจ ุจูู ๐๐"])
    await txt1(m, "ุงูุจูุช ูุงูู", ["ูุง ุชูุฐุจ ุญุจู๐"])
    await txt1(m, "ุงููุฏุฑุณู", ["ุงุฐุง ุจุชุฌูุจ ุงุณููุง ุจุทุฑุฏู๐โจ"])
    await txt1(m, "ุดูู", [" ุงุดูู ุงู ๐๐"])
    await txt1(m, "๐", ["ุญุจุนูุฑู๐ฝ๐"])
    await txt1(m, "๐", ["ูููุฏ ุจูุง ุงูู ๐"])
    await txt1(m, "๐ถ๐", ["ุชุนุงูู ุงุดูููู ุงูุด ููู๐๐"])
    await txt1(m, "๐", [" ุงุดูููู ูููู ููุด ูุชุถุงูู๐๐"])
    await txt1(m, "๐ณ", ["ุงููููุฏ๐๐น"])
    await txt1(m, "๐", ["ุงูุด ุจูู ุ๐"])
    await txt1(m, "๐", [" ูุฏูุชู ูุงู๐๐"])
    await txt1(m, "ุชุญุจูู", ["ุงููู ุงููุฑ๐๐น", "ุฒู ุงุฎุชู ๐", "ูุงููุง ุจุงูุฎูุงุฒูู ๐ฅบโค๏ธ", "ุจูุฑูููููู ๐๐"])
    await txt1(m, "ุจุชุญุจูู", ["ุงููู ุงููุฑ๐๐น", "ุฒู ุงุฎุชู ๐", "ูุงููุง ุจุงูุฎูุงุฒูู ๐ฅบโค๏ธ", "ููู ุงูููุฑ ููุชุญุจุด ุุ โค๏ธ๐"])
    await txt1(m, "ุจุงู", ["ุน ููู ูููู ุฑุงูุญ ูุณุงูุจูู๐๐"])
    await txt1(m, "ุจุงู", ["ุน ููู ูููู ุฑุงูุญ ูุณุงูุจูู๐๐", "ุจุงูุจุงู ๐", "ูู ุฑุนุงูู ุงููู ๐ฅบโค๏ธ", "ูู ุณุชูู ุฏุงููู ๐๐"])
    await txt1(m, "ุชุนุงูู ุฎุงุต", ["ูู ุจูุช ูุงุฌู ุบูุฑ ูุฏุฉ ูุง ๐๐"])
    await txt1(m, "ูุฑุฎู", ["ุฎูููุง ุชุจูุถ๐๐๐"])
    await txt1(m, "ุญุงุถุฑ", ["ุญุถุฑูู ุงูุฎูุฑ ูุงุงุฑุจ โค๏ธ", "ุดุทูููุฑ ๐", "ุงู ุงูุงุญุชุฑุงู ุฏู ๐"])
    await txt1(m, "๐", ["ูุงูู ู ุญุจูุจู ๐"])
    await txt1(m, "ุงุฑ ูู ุฑูุฏู", ["ุจููู ุงููููุต ูุฌูุฒุช ุงูู ๐ฅ๐ฅบ๐"])
    await txt1(m, "ูุงุช", ["ุงุฒุบุท ุจุท ๐ณ๐"])
    await txt1(m, "ูููุด ุฏุนูุฉ", ["ุฎุฏู ูุงุณุชุนูู โค๏ธ๐"])
    await txt1(m, "ุงูุช ูุงูู", ["ูุงูู ูู ุฌูุจู ูู โค๏ธ๐"])
    await txt1(m, "ุงุญุณู", ["ุฌุชู ูุญุณู ๐๐"])
    await txt1(m, "ูุนู", ["ูุนู ุงููู ุนููู๐"])
    await txt1(m, "ูุฑุชุจุท", ["ูุฑุชุจุท ูุน ููุณู ูุงุญุฒุงูู โค๏ธ๐ข"])
    await txt1(m, "ุจููู", ["ููุง ุงููู ููู ูุฌุฑุญู๐ข"])
    await txt1(m, "ุงูุง ุจูุฑูู", ["ุญุจูู ุจูููุฒ ๐ฅบ"])
    await txt1(m, "ุจูุจู", ["ููุจู ูุงูุงุณ ููุจุงุงุงุงุงู ๐โค๏ธ"])
    await txt1(m, "ูุง", ["ูุงุง ูุงุฑูุญู"])
    await txt1(m, "ูุฏูุช", ["ูุฏุงุงู โฅ๏ธ"])
    await txt1(m, "ูุญุฏุด ุจูุณุงู ุนููุง", ["ุจูุณุฃู ุนููู ูุงุญูููู ๐ค๐"])
    await txt1(m, "ุดููููู", ["ุชูุงู ูุงูุช ููููุช ุ ๐"])
    await txt1(m, "ูุฏุงุจ", ["ุงูุช ุงููู ูุฏุงุงุจ ูุญููุชูุง โค๏ธ๐น"])
    await txt1(m, "ุนุงุฏู", ["ูู ุงููุนุงุฏู ูู๐๐"])
    await txt1(m, "ุนุฌุจุชู", ["ุงูููุฏ ุงูุชููุฑ ๐"])
    await txt1(m, "ุญุจูุจู", ["ุงูู ูุงู ๐๐"])
    await txt1(m, "ุจุช", ["ููุง ุงุณู ูุงุถ ูุนุฑู ูููุฒุก ููููููููู๐น๐๐๐ปโโ"])
    await txt1(m, "ุฑูุญู", ["ุฎูุตุชุช ุฑูุญูู ูุจุนูุฏ๐น๐ถ๐ปโโ๐"])
    await txt1(m, "ุจูุชู", ["ููุจ ุจูุชูู ูู ุฌูุงุง ๐ฅบโฅ๏ธ"])
    await txt1(m, "ูุด ูุชูุฌู", ["ูุด ูุฑููููุญ ๐น๐๐ปโโ๐๐ปโโ"])
    await txt1(m, "ุชู", ["ุงุตูุฎุต ุนููู ููุชู ุกุชูููููู๐น๐"])
    await txt1(m, "ูู", ["ุจุณูููุงุญ ูุนุฑู ูุณูุนุด ุตูุชูู๐น๐คธ๐ปโโ๐"])
    await txt1(m, "ุงู", ["ุฌุชู ุงููู ู ุณุงูุน ููุง ุงูู๐น๐ป"])
    await txt1(m," ูุจุฑูุฌ ุงูุณูุฑุณ", ["โ ูุจุฑูุฌ ุงูุณูุฑุณ> @WWWL5 ๐จโ๐ป"])
    await txt1(m, "ุฎูุงุต", ["ุฎูุตุชุช ุฑูุญูู ูุจุนูุฏ๐น๐ถ๐ปโโ๐"])

    await txt1(m, "ุฑูุน ุดุงุฐ", ["""โ ุฃููุงู ุนุฒูุฒู 
โ ุชู ุฑูุน ุงูุนุถู ุดุงุฐ ุจูุฌุงุญ ๐ณโ๐
โ ูู ุงูุงู ุดุงุฐ ููุงุจู ููุดูุท ูุงู ูุตูุญู ุงุฎุฑู ๐๐ผ
โขุงูููู ุงุญูุธูุงโข ๐น๐"""])
    await txt1(m, "ุฑูุน ุดุงุฐู", ["""โ ุฃููุงู ุนุฒูุฒู 
โ ุชู ุฑูุน ุงูุนุถูู ุดุงุฐู ุจูุฌุงุญ ๐ณโ๐
โ ูู ุงูุงู ุดุงุฐู ููุงุจูู ููุดูุท ูุงู ูุตูุญู ุงุฎุฑู ๐๐ผ
โขุงูููู ุงุญูุธูุงโข ๐น๐"""])
    await txt1(m, "ูุชู ุงููู", ["""โ ุชู ูุชู ุงููู ุจูุฌุงุญ ๐๐ปโโ
ร ููุชุชููู ูุน ููู ููุชูุญุฏ ุงูุชร ๐น๐ถ๐ปโโ"""])
    await txt1(m, "ุชูุฒูู ุดููุทู", ["""โ ุชู ุชูุฒูู ุงูุนุถู ุดููุทู ุจูุฌุงุญ ๐ฅฒ
โ ุงูุงู ูู ููุง ุจูุนุฑู ูุดูุท ููุง ูููู ุญุงุฌู๐น๐คธ๐ปโโ๐"""])
    await txt1(m, "ุญุฐู ุญูุงุชู", ["""โ ุงููุง ูุนู ุงููุฌููู 
โ  ุชู ุญุฐู ุญูุงุชู ุงูู ูููุชุด ููุฌูุฏู ุงุตูุง
โ ุงูุงู ุงูุช ูุนุฏูู ูู ูู ุญุชู 
โข ุฎุฒุงู ุกุญุฒุงู โข"""])
    await txt1(m, "ุชุนุทูู ุงููุญู", ["""โ ุงููุง ุนุฒูุฒู ๐๐ปโโ
โ ุชู ุชุนุทูู ุงููุญู ุจูุฌุงุญ ๐๐น
โ ุงุชูุญูููุง ุจู ุนุดุงู ุงููุฑุงุฑู ๐๐"""])
    await txt1(m, "ุฑูุน ุฎูุฒูุฑ", ["""โ ุชู ุฑูุน ุงูุนุถู ุญูุฒูุฑ ุจูุฌุงุญ
โ ูู ุงูุงู ุฎูุฒูุฑ ุจูุดุฎุฑ 24 ุณุงุนูู ููุญุฏุด ุนุงุฑู ูููู๐ท๐ณ"""])
    await txt1(m, "ุฑูุน ุดููุทู", ["""โ ุชู ุฑูุน ุงูุนุถู ุดููุทู 
โ ูู ุงูุงู ุจูุนุฑู ูุดูุท ููุด ุณุงูุจ ุญุฏ ูุญุงูู๐น๐"""])
    await txt1(m, "ุดุฎ", ["""โ ุชู ุงูุดุฎ ุน ุงูุนุถู ุจูุฌุงุญ ๐ฉ
โ ูู ุงูุงู ุนููู ุดุฎุงูู ูุนุนุนุนุนุนุนุนุนุนุน ๐น๐ต"""])
    await txt1(m, "ูู", ["""โ ุชู ุงููู ุน ุงูุนุถู ุจูุฌุงุญ ๐คง
 ูู ุงูุงู ุนููู ุจุฑุจูุฑ ูุนุนุนุนุนุนุนุนุนุนุน ๐น๐ช"""])
    await txt1(m, "ุฑูุน ุญูุงู", ["""โ ุชู ุฑูุน ุงูุนุถู ุญูุงู ุจูุฌุงุญ ๐
    โ ุงู ูุงุญูุงู ูุงุนุฑู ุงููุฌุชูุน ๐น๐ต"""])
    await txt1(m, "ุฑูุน ููุฑ", ["""โ ุชู ุฑูุน ุงูุนุถู ููุฑ ุจูุฌุงุญ ๐
    โ ูุฎูุงุซู ุนูู ููุฑุงูู ุงูุฑูู ูุงูุงุณ ๐ฅบโค๏ธ"""])
    await txt1(m, "ุฑูุน ูุฒุชู", ["""โ ุชู ุฑูุน ุงูุนุถู ูุฒู ุฌุงูุฏู ูุญุช ุจูุฌุงุญ ๐
    โ ุงู ูุงุจุช ูุงูุฒุฒุฒู ููุง ูุฒู ูุฒุงุงุงู ๐๐"""])
    await txt1(m, "ุฑูุน ุงุฎููุง", ["""โ ุชู ุฑูุน ุงูุนุถู ุงุฎุง ูู ๐
    โ ูุจูู ุงุฎููุง ุงููู ูุฌุจุชููุด ุงูู โค๏ธ๐"""])
    await txt1(m, "ุฑูุน ุงุฎุชู", ["""โ ุชู ุฑูุน ุงููุฒู ุฏู ุงุฎุชู ๐
    โ ุจููุชู ุงุฎูุงุช ุฎูุงุต ููููุนุด ุชุชุฌูุฒู ๐๐"""])

    if m.text == "ููุจ" or m.text == "ููุงุจ":
        r = requests.get("https://random.dog/woof.json")
        rj = r.json()
        dog = rj["url"]
        await m.reply_photo(dog, reply_to_message_id=m.message_id)
        return

    if m.text == "ูุทู" or m.text == "ูุทุท":
        r = requests.get("https://api.thecatapi.com/v1/images/search")
        rj = r.json()
        dog = rj[0]["url"]
        await m.reply_photo(dog, reply_to_message_id=m.message_id)
        return

    if m.text == "ุจููุฌ" or m.text == "ping":
        first = datetime.now()
        sent = await m.reply_text("<b>Pong!</b>")
        second = datetime.now()
        await sent.edit_text(f"<b>Pong!</b> <code>{(second - first).microseconds / 1000}</code>ms")
        return

    # all ====================
    # await txtall(m, ["S"], "G")
    await txtall(m, ["ูุฑุงุชู"], ["ุนุฑููู ุนูููุง ูููุจู ุซูุงุจ๐ฅบ๐"])
    await txtall(m, ["ููุชูู"], ["ุจุชุนุงูุณ ุงูุช ูุญุฏ ูููููู ุนููู ุญูุงู ุจุชุญุตู ุจุชุญุตู ๐๐"])
    await txtall(m, ["ููุฒู"], ["ุฎู ูุนุงูุณู ูุจูู ุนููุจ ๐๐"])
    await txtall(m, ["ุญูุงู"], ["ุงููู ุนููู ูุงุดูุฎูุง ๐๐น"])
    await txtall(m, ["ุญุฑุงู"], ["ุงุฎูุฑุง ูู ุญุฏ ุนุงูู โค๏ธ๐"])
    await txtall(m, ["ุณุฌุงุฑู"], ["ุงุจูู ุนุงุฑู ุงูู ุจุชุดุฑุจ ุณุฌุงูุฑ ๐๐"])
    await txtall(m, ["ููุฑู"], ["ุนููุจ ูุดููุชุด ููุณู ูู ุงูู ูุฑู ูุณูุช ุชูููู ูุงู ููุธุฑู ูุฏู ๐คช"])
    await txtall(m, ["ุญุจูุจุชู"], ["ุงูุนู ุน ุงูุฌูุฏุงู ุจูุง ุญุจูุจุชู ูุดุบู ุนุงูู ๐โค๏ธ"])
    await txtall(m, ["ุณู ูู", "ุณููู", "cv"], ["ููุงูู ุดูุท ูุจูู ุณูุจ ุญุงุฌู ูุบูุฑู ๐น๐"])
    await txtall(m, ["ุงุฎุฑุณ"], ["ูุชุช ูุงุฒูู ูุญุทูุง ุน ุจูุฆูู๐น๐๐คธ๐ปโโ"])
    await txtall(m, ["ุจูููู", "ุจููู"], ["ูุงุก ูุชูููุด ููููููููู๐น๐๐ปโโโฅ๏ธ", "ุดููู ููุจู๐๐",
                                        "ุงูุชุงูู ุงููู ุฒูู ููููู ุงู ูุนูู๐๐"])
    await txtall(m, ["ุฏู ุจูุช", "ุฏุง ุจูุช", "ุฏูู ุจูุช"], ["ูุงุญูููู ูู ูุงู ูุงูุฑูู ุงูุณุงู ููุง ุงูู ๐น"])
    await txtall(m, ["ุฌูุช", "ุงูุง ุฌูุช"], ["ูู ูุงุฑุฌุน ุชุงูู ู ุญูุงุฑุฑ ๐น๐ถ๐ปโโโฅ๏ธ"])
    await txtall(m, ["ูุณุงุก ุงูุฎูุฑ", "ุณุงูุฎูุฑ", "ูุณุงุก ุงูููุฑ"], ["ุณุงูููุฑ ูุงููุง ๐๐ป๐น", "ูุณุงุฆู ุนุณู ู ุนุณูโค๏ธ๐",
                                                             "ูุณุง ูุณุง ุน ุงููุงุณ ุงููููุณู ๐โค๏ธ", "ูุณุงุงุงุงุกู ูู โค๏ธ๐"])
    await txtall(m, ["ุงุญุชููู"], ["""โ ุชู ุงุญุชูุงุก ุงูุนุถู ุจูุฌุงุญ 
    โ ุชุน ู ุญุถู ุญูู ูุงููุง ๐นโฅ๏ธ"""])
    await txtall(m, ["ููู"], ["ููุทุนูู ๐น๐๐ปโโโฅ๏ธ"])
    await txtall(m, ["ุดุดุด"], ["ุจููุด ูุชุงููุช ุงุญูุง ููุง ููุง ุงู๐๐"])
    await txtall(m, ["ุตุจุงุญ ุงูุฎูุฑ"], ["ุตุจุงุญู ุนุณู ู ุนุณูโค๏ธ๐", "ุตุจุญ ุตุจุญ ูุงุนู ุงูุญุฌ ๐โค๏ธ", "ุตุจุงุญููู ูู โค๏ธ๐"])
    await txtall(m, ["ุฑูู ุงู ุฏู"], ["ุฑุบู ูุดูุท๐๐", "ููููู ุงู ูุนูู ุบูุฑ ุฑุบู๐๐"])
    await txtall(m, ["ุงุณูุช"], ["ุงูุง ุงูุช ุบุชุช ุตุญูุญ๐๐ฅบ", "ูููุฏ ูุญุฏ ุงูุชู๐๐"])
    await txtall(m, ["ุจ.ู", "ุจ ู", "ุจู ุงู"], ["๐ุฎุฏููู ูุนุงูููุง", "ุงุฌู ููุงูู ๐๐", "ูุงุงุงูุนู๐ฅ๐"])
    await txtall(m, ["ุงูุณูุงู ุนูููู", "ุณูุงู ุนูููู"], ["ูุนูููู ุงูุณูุงูโค๏ธ"])

    # rep all sticker ====================
    # await stickerall(m, ["t"], "sticker link")
    await stickerall(m, ["ุจุต", "ุจุตู", "ุจุต ูุฏู"], "https://t.me/UURTBOT/4")
    await stickerall(m, ["ุงุฌุฑู", "ุฅุฌุฑู", "ุฃุฌุฑู"], "https://t.me/UURTBOT/7")
    await stickerall(m, ["ููุณููุฉ", "ููุณููู"], "https://t.me/UURTBOT/9")
    await stickerall(m, ["ุนุงุด"], "https://t.me/UURTBOT/10")
    await stickerall(m, ["ุฌุงูุฏ"], "https://t.me/UURTBOT/11")
    await stickerall(m, ["ุฏูุงุบ"], "https://t.me/UURTBOT/12")
    await stickerall(m, ["ุจููุฑ"], "https://t.me/UURTBOT/13")
    await stickerall(m, ["ุญุจูู"], "https://t.me/UURTBOT/14")
    await stickerall(m, ["ูุทุทุชู"], "https://t.me/UURTBOT/15")
    await stickerall(m, ["ุจุทู"], "https://t.me/UURTBOT/16")
    await stickerall(m, ["ููุฑ"], "https://t.me/UURTBOT/17")
    await stickerall(m, ["ูุชููุช"], "https://t.me/UURTBOT/18")
    await stickerall(m, ["ุญุฒูู"], "https://t.me/UURTBOT/19")
    await stickerall(m, ["ูุงุชูุฌู", "ูุชูุฌู", "ูุชููู"], "https://t.me/UURTBOT/21")
    await stickerall(m, ["ุงุณุทูุฑู"], "https://t.me/UURTBOT/22")
    await stickerall(m, ["ุนุดู"], "https://t.me/UURTBOT/23")
    await stickerall(m, ["ูููุฑ"], "https://t.me/UURTBOT/24")
    await stickerall(m, ["ุจุตูู"], "https://t.me/UURTBOT/25")
    await stickerall(m, ["ุงุญุฒููู"], "https://t.me/UURTBOT/26")
    await stickerall(m, ["ุฌูุฏุงู"], "https://t.me/UURTBOT/27")
    await stickerall(m, ["ุญุฑุงูู"], "https://t.me/UURTBOT/28")
    await stickerall(m, ["ุงุชูู", "ุงุชูู"], "https://t.me/UURTBOT/29")
    await stickerall(m, ["ุนุงุฏู ุดูู", "ูููุงุณู", "ุงููุงุญู", "ุงูุฒุนุงูู"], "https://t.me/UURTBOT/30")
    await stickerall(m, ["ู ุนุงุฑู", "ูุด ุนุงุฑู"], "https://t.me/UURTBOT/31")
    await stickerall(m, ["error", "ุงูุฑูุฑ", "404"], "https://t.me/higufhkgjb/91")
    await stickerall(m, ["ุตุฏูุชูู", "ุตุฏูู"], "https://t.me/UURTBOT/33")

    # rep one sticker ====================
    # await sticker1(m, "t", "sticker link")
    await sticker1(m, "ูุชู", "https://t.me/UURTBOT/34")

    # rep audio one
    await audioall(m, ["ูุชุงุจ ุญูุงุชู ูุงุนูู", "ูุชุงุจ ุญูุงุชู"], "https://t.me/UURTBOT/35")
